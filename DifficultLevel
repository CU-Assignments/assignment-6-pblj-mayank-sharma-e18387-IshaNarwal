import java.util.*;
import java.util.stream.*;

class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() { return name; }
    public String getCategory() { return category; }
    public double getPrice() { return price; }

    @Override
    public String toString() {
        return "Product{name='" + name + "', category='" + category + "', price=" + price + "}";
    }
}

public class HardLevel {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1000),
            new Product("Phone", "Electronics", 800),
            new Product("Shirt", "Clothing", 40),
            new Product("Jeans", "Clothing", 60),
            new Product("Blender", "Home Appliances", 120)
        );

        System.out.println("Grouped by Category:");
        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(Product::getCategory));
        grouped.forEach((category, items) -> {
            System.out.println(category + ": " + items);
        });

        System.out.println("\nMost Expensive Product in Each Category:");
        Map<String, Optional<Product>> mostExpensive = products.stream()
            .collect(Collectors.groupingBy(Product::getCategory,
                    Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))));
        mostExpensive.forEach((category, product) -> {
            System.out.println(category + ": " + product.get());
        });

        double avgPrice = products.stream()
            .collect(Collectors.averagingDouble(Product::getPrice));
        System.out.println("\nAverage Price of All Products: " + avgPrice);
    }
}
